/* tslint:disable */
/* eslint-disable */
/**
 * Portfolio
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ShareVolumeViewModel
 */
export interface ShareVolumeViewModel {
    /**
     * 
     * @type {string}
     * @memberof ShareVolumeViewModel
     */
    'symbol'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShareVolumeViewModel
     */
    'volume'?: number;
}
/**
 * 
 * @export
 * @interface ShareVolumesViewModel
 */
export interface ShareVolumesViewModel {
    /**
     * 
     * @type {Array<ShareVolumeViewModel>}
     * @memberof ShareVolumesViewModel
     */
    'shareVolumes'?: Array<ShareVolumeViewModel> | null;
}

/**
 * PortfolioApi - axios parameter creator
 * @export
 */
export const PortfolioApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} symbol 
         * @param {number} volume 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portfolioBuySymbolVolumePatch: async (symbol: string, volume: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('portfolioBuySymbolVolumePatch', 'symbol', symbol)
            // verify required parameter 'volume' is not null or undefined
            assertParamExists('portfolioBuySymbolVolumePatch', 'volume', volume)
            const localVarPath = `/portfolio/buy/{symbol}/{volume}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)))
                .replace(`{${"volume"}}`, encodeURIComponent(String(volume)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portfolioGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/portfolio`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} symbol 
         * @param {number} volume 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portfolioSellSymbolVolumePatch: async (symbol: string, volume: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('portfolioSellSymbolVolumePatch', 'symbol', symbol)
            // verify required parameter 'volume' is not null or undefined
            assertParamExists('portfolioSellSymbolVolumePatch', 'volume', volume)
            const localVarPath = `/portfolio/sell/{symbol}/{volume}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)))
                .replace(`{${"volume"}}`, encodeURIComponent(String(volume)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PortfolioApi - functional programming interface
 * @export
 */
export const PortfolioApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PortfolioApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} symbol 
         * @param {number} volume 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async portfolioBuySymbolVolumePatch(symbol: string, volume: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.portfolioBuySymbolVolumePatch(symbol, volume, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioApi.portfolioBuySymbolVolumePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async portfolioGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareVolumesViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.portfolioGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioApi.portfolioGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} symbol 
         * @param {number} volume 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async portfolioSellSymbolVolumePatch(symbol: string, volume: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.portfolioSellSymbolVolumePatch(symbol, volume, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioApi.portfolioSellSymbolVolumePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PortfolioApi - factory interface
 * @export
 */
export const PortfolioApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PortfolioApiFp(configuration)
    return {
        /**
         * 
         * @param {string} symbol 
         * @param {number} volume 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portfolioBuySymbolVolumePatch(symbol: string, volume: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.portfolioBuySymbolVolumePatch(symbol, volume, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portfolioGet(options?: RawAxiosRequestConfig): AxiosPromise<ShareVolumesViewModel> {
            return localVarFp.portfolioGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} symbol 
         * @param {number} volume 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portfolioSellSymbolVolumePatch(symbol: string, volume: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.portfolioSellSymbolVolumePatch(symbol, volume, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PortfolioApi - object-oriented interface
 * @export
 * @class PortfolioApi
 * @extends {BaseAPI}
 */
export class PortfolioApi extends BaseAPI {
    /**
     * 
     * @param {string} symbol 
     * @param {number} volume 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioApi
     */
    public portfolioBuySymbolVolumePatch(symbol: string, volume: number, options?: RawAxiosRequestConfig) {
        return PortfolioApiFp(this.configuration).portfolioBuySymbolVolumePatch(symbol, volume, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioApi
     */
    public portfolioGet(options?: RawAxiosRequestConfig) {
        return PortfolioApiFp(this.configuration).portfolioGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} symbol 
     * @param {number} volume 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioApi
     */
    public portfolioSellSymbolVolumePatch(symbol: string, volume: number, options?: RawAxiosRequestConfig) {
        return PortfolioApiFp(this.configuration).portfolioSellSymbolVolumePatch(symbol, volume, options).then((request) => request(this.axios, this.basePath));
    }
}



